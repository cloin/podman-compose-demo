name: Start Demo

on:
  workflow_dispatch:
    inputs:
      podman-compose-path:
        description: 'Path to the podman-compose.yml file'
        required: true
        default: 'podman-compose.yml'
        type: string

  workflow_call:
    inputs:
      podman-compose-path:
        description: 'Path to the podman-compose.yml file'
        required: true
        default: 'podman-compose.yml'
        type: string

permissions:
  contents: write
  issues: write
  actions: write

jobs:
  setup-services:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    env:
      FAILURE: false
      SUCCESS: false

    steps:
    - name: Create new issue
      id: create-issue
      uses: actions/github-script@v5
      with:
        script: |
          const { data: issue } = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Demo environment access - Job ID: ${context.runId}`,
            body: 'The demo environment is being set up. Details will follow shortly.'
          });
          core.setOutput('issue-number', issue.number);

    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        pip3 install podman-compose==1.0.6 pyyaml==5.4.1 requests==2.25.1
        npm install -g localtunnel

    - name: Create package.json for localtunnel
      run: |
        echo '{
          "name": "localtunnel-script",
          "version": "1.0.0",
          "description": "Localtunnel API script",
          "main": "generate_localtunnel_commands.js",
          "dependencies": {
            "localtunnel": "^2.0.0"
          }
        }' > package.json
        npm install

    - name: Start SSH service
      run: |
        sudo systemctl start ssh
        sudo systemctl enable ssh

    - name: Set up SSH for the runner
      run: |
        mkdir -p ~/.ssh
        ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N ""
        cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys
        echo "Host *" > ~/.ssh/config
        echo "  StrictHostKeyChecking no" >> ~/.ssh/config

    - name: Start services with podman-compose
      run: |
        podman-compose -f "${{ inputs.podman-compose-path }}" up -d
        sleep 10  # Wait for services to start

    - name: Verify services are running
      run: |
        podman-compose -f "${{ inputs.podman-compose-path }}" ps

    - name: Generate localtunnel commands
      run: node generate_localtunnel_commands.js

    - name: Get localtunnel URLs
      id: get-localtunnel-urls
      run: |
        WEB_TUNNEL_URL=$(cat web_tunnel_url.txt)
        SSH_TUNNEL_URL=$(cat ssh_tunnel_url.txt)
        echo "::set-output name=web_url::$WEB_TUNNEL_URL"
        echo "::set-output name=ssh_url::$SSH_TUNNEL_URL"

    - name: Base64 encode SSH private key
      id: encode-ssh-key
      run: |
        base64 -w 0 ~/.ssh/id_rsa > id_rsa_base64
        echo "::set-output name=ssh_key_base64::$(cat id_rsa_base64)"

    - name: Update issue body file
      run: |
        SSH_HOST=$(echo ${{ steps.get-localtunnel-urls.outputs.ssh_url }} | sed -E 's#^https://(.*):(.*)$#\1#')
        SSH_PORT=$(echo ${{ steps.get-localtunnel-urls.outputs.ssh_url }} | sed -E 's#^https://(.*):(.*)$#\2#')
        WEB_URL=${{ steps.get-localtunnel-urls.outputs.web_url }}

        echo "Your services are available at the following URLs:" > issue_body.md
        echo "Web service: $WEB_URL" >> issue_body.md
        echo "" >> issue_body.md
        echo "SSH into the runner using the following command:" >> issue_body.md
        echo "\`\`\`" >> issue_body.md
        echo "echo \"${{ steps.encode-ssh-key.outputs.ssh_key_base64 }}\" | base64 --decode > id_rsa" >> issue_body.md
        echo "chmod 600 id_rsa" >> issue_body.md
        echo "ssh -i id_rsa -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no runner@$SSH_HOST -p $SSH_PORT" >> issue_body.md
        echo "\`\`\`" >> issue_body.md

    - name: Update issue with environment details
      uses: actions/github-script@v5
      with:
        script: |
          const fs = require('fs');
          const issueBody = fs.readFileSync('issue_body.md', 'utf8');
          await github.rest.issues.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: '${{ steps.create-issue.outputs.issue-number }}',
            body: issueBody
          });

    - name: Monitor issue for closure
      id: monitor-issue
      uses: actions/github-script@v5
      timeout-minutes: 60  # Set timeout duration for 1 hour
      with:
        script: |
          const issueNumber = '${{ steps.create-issue.outputs.issue-number }}';
          const timeoutDuration = 3600000;  // 1 hour in milliseconds
          const startTime = Date.now();

          const checkIssueClosed = async () => {
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });
            if (issue.state === 'closed') {
              core.info('Issue is closed. Marking workflow as successful.');
              core.setOutput('issue-closed', true);
              return;
            } else if (Date.now() - startTime > timeoutDuration) {
              core.info('Timeout reached. Closing issue and marking workflow as successful.');
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                state: 'closed',
                body: issue.body + '\n\nClosed automatically due to timeout.'
              });
              core.setOutput('issue-closed', true);
              return;
            } else {
              core.info('Issue is still open. Continuing...');
              setTimeout(checkIssueClosed, 60000);
            }
          };
          await checkIssueClosed();

    - name: Set failure status
      if: failure()
      run: echo "Setting workflow status to failure..."
      env:
        FAILURE: true

    - name: Cleanup
      if: always()
      run: |
        podman-compose -f "${{ inputs.podman-compose-path }}" down
        pkill lt || true

    - name: Close issue with comment
      if: always()
      run: |
        ISSUE_NUMBER=${{ steps.create-issue.outputs.issue-number }}
        curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -d "{\"body\": \"Closing this issue as the session has ended.\", \"state\": \"closed\"}" \
          "https://api.github.com/repos/${{ github.repository }}/issues/${ISSUE_NUMBER}"

    - name: Report success
      if: steps.monitor-issue.outputs.issue-closed == true
      run: echo "Workflow completed successfully."

    - name: Report failure
      if: env.FAILURE == true
      run: echo "Workflow failed."
