name: Start Demo

on:
  workflow_dispatch:
    inputs:
      podman-compose-path:
        description: 'Path to the podman-compose.yml file'
        required: true
        default: 'podman-compose.yml'
        type: string
  workflow_call:
    inputs:
      podman-compose-path:
        description: 'Path to the podman-compose.yml file'
        required: true
        default: 'podman-compose.yml'
        type: string
    secrets:
      NGROK_AUTH_TOKEN:
        required: true

permissions:
  contents: write
  issues: write
  actions: write

jobs:
  setup-services:
    runs-on: ubuntu-latest

    steps:
    - name: Create new issue
      id: create-issue
      uses: actions/github-script@v5
      with:
        script: |
          const { data: issue } = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Demo environment access',
            body: 'The demo environment is being set up. Details will follow shortly.'
          });
          core.setOutput('issue-number', issue.number);

    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install podman-compose and dependencies
      run: |
        pip3 install podman-compose==1.0.6 pyyaml==5.4.1 requests==2.25.1

    - name: Start SSH service
      run: |
        sudo systemctl start ssh
        sudo systemctl enable ssh

    - name: Set up SSH for the runner
      run: |
        mkdir -p ~/.ssh
        ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N ""
        cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys
        echo "Host *" > ~/.ssh/config
        echo "  StrictHostKeyChecking no" >> ~/.ssh/config

    - name: Start services with podman-compose
      run: |
        podman-compose -f "${{ inputs.podman-compose-path }}" up -d
        sleep 10  # Wait for services to start

    - name: Verify services are running
      run: |
        podman-compose -f "${{ inputs.podman-compose-path }}" ps

    - name: Download generate_ngrok_config.py script
      run: |
        curl -O https://raw.githubusercontent.com/cloin/podman-compose-demo/main/.github/workflows/generate_ngrok_config.py

    - name: Create ngrok configuration file
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        PODMAN_COMPOSE_PATH: ${{ inputs.podman-compose-path }}
      run: |
        python generate_ngrok_config.py

    - name: Display ngrok configuration
      run: cat ngrok.yml

    - name: Install ngrok
      run: |
        curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null && \
        echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list && \
        sudo apt-get update && sudo apt-get install ngrok

    - name: Start ngrok with configuration file
      run: ngrok start --config ngrok.yml --all &

    - name: Get ngrok URLs
      id: get-ngrok-urls
      run: |
        sleep 5  # Wait for ngrok to start
        NGROK_WEB_URL=$(curl --silent http://localhost:4040/api/tunnels | jq -r '.tunnels[] | select(.name | contains("web")) | .public_url')
        NGROK_SSH_URL=$(curl --silent http://localhost:4040/api/tunnels | jq -r '.tunnels[] | select(.name=="ssh") | .public_url')
        echo "::set-output name=web_url::$NGROK_WEB_URL"
        echo "::set-output name=ssh_url::$NGROK_SSH_URL"

    - name: Base64 encode SSH private key
      id: encode-ssh-key
      run: |
        base64 -w 0 ~/.ssh/id_rsa > id_rsa_base64
        echo "::set-output name=ssh_key_base64::$(cat id_rsa_base64)"

    - name: Update issue body file
      run: |
        SSH_HOST=$(echo ${{ steps.get-ngrok-urls.outputs.ssh_url }} | sed -E 's#^tcp://(.*):(.*)$#\1#')
        SSH_PORT=$(echo ${{ steps.get-ngrok-urls.outputs.ssh_url }} | sed -E 's#^tcp://(.*):(.*)$#\2#')
        echo "Your services are available at the following URLs:" > issue_body.md
        echo "Web service: ${{ steps.get-ngrok-urls.outputs.web_url }}" >> issue_body.md
        echo "" >> issue_body.md
        echo "SSH into the runner using the following command:" >> issue_body.md
        echo "\`\`\`" >> issue_body.md
        echo "echo \"${{ steps.encode-ssh-key.outputs.ssh_key_base64 }}\" | base64 --decode > id_rsa" >> issue_body.md
        echo "chmod 600 id_rsa" >> issue_body.md
        echo "ssh -i id_rsa -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no runner@${SSH_HOST} -p ${SSH_PORT}" >> issue_body.md
        echo "\`\`\`" >> issue_body.md

    - name: Update issue with environment details
      uses: actions/github-script@v5
      with:
        script: |
          const fs = require('fs');
          const issueBody = fs.readFileSync('issue_body.md', 'utf8');
          await github.rest.issues.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: '${{ steps.create-issue.outputs.issue-number }}',
            body: issueBody
          });

    - name: Monitor issue for closure
      uses: actions/github-script@v5
      with:
        script: |
          const issueNumber = '${{ steps.create-issue.outputs.issue-number }}';
          const checkIssueClosed = async () => {
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });
            if (issue.state === 'closed') {
              core.info('Issue is closed. Canceling workflow...');
              await github.rest.actions.cancelWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: context.runId
              });
            } else {
              core.info('Issue is still open. Continuing...');
            }
          };
          setInterval(checkIssueClosed, 60000); // Check every minute

    - name: Sleep for interaction period
      run: sleep 3600  # Keep services alive for 1 hour

    - name: Cleanup
      if: always()
      run: |
        podman-compose -f "${{ inputs.podman-compose-path }}" down
        pkill ngrok

    - name: Close issue with comment
      if: always()
      run: |
        ISSUE_NUMBER=${{ steps.create-issue.outputs.issue-number }}
        curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -d "{\"body\": \"Closing this issue as the session has ended.\", \"state\": \"closed\"}" \
          "https://api.github.com/repos/${{ github.repository }}/issues/${ISSUE_NUMBER}"
