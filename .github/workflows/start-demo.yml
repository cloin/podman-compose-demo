name: Start Demo

on:
  workflow_call:
    inputs:
      podman-compose-path:
        description: 'Path to the podman-compose.yml file'
        required: true
        default: 'podman-compose.yml'
        type: string
    secrets:
      NGROK_AUTH_TOKEN:
        required: true

permissions:
  contents: write
  issues: write
  actions: write

jobs:
  setup-services:
    runs-on: ubuntu-latest

    steps:
    - name: Create new issue
      id: create-issue
      uses: actions/github-script@v5
      with:
        script: |
          const { data: issue } = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Demo environment access',
            body: 'The demo environment is being set up. Details will follow shortly.'
          });
          core.setOutput('issue-number', issue.number);

    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install podman-compose and dependencies
      run: |
        pip3 install podman-compose pyyaml requests

    - name: Start SSH service
      run: |
        sudo systemctl start ssh
        sudo systemctl enable ssh

    - name: Set up SSH for the runner
      run: |
        mkdir -p ~/.ssh
        ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N ""
        cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys
        echo "Host *" > ~/.ssh/config
        echo "  StrictHostKeyChecking no" >> ~/.ssh/config

    - name: Start services with podman-compose
      run: |
        podman-compose -f "${{ inputs.podman-compose-path }}" up -d
        sleep 10  # Wait for services to start

    - name: Verify services are running
      run: |
        podman-compose -f "${{ inputs.podman-compose-path }}" ps

    - name: Create ngrok configuration file
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
      run: |
        import yaml
        import os

        podman_compose_path = os.getenv('INPUT_PODMAN_COMPOSE_PATH')
        with open(podman_compose_path, 'r') as file:
          podman_compose = yaml.safe_load(file)

        ngrok_config = {
          'version': '2',
          'authtoken': os.getenv('NGROK_AUTH_TOKEN'),
          'tunnels': {}
        }

        for service_name, service_data in podman_compose.get('services', {}).items():
          ports = service_data.get('ports', [])
          for port in ports:
            if ':' in port:
              internal_port, external_port = port.split(':')
              if not internal_port.startswith('127.0.0.1'):
                ngrok_config['tunnels'][f'{service_name}_{external_port}'] = {
                  'addr': external_port,
                  'proto': 'http',
                  'inspect': False
                }

        with open('ngrok.yml', 'w') as file:
          yaml.dump(ngrok_config, file)

    - name: Display ngrok configuration
      run: cat ngrok.yml

    - name: Install ngrok
      run: |
        curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null && \
        echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list && \
        sudo apt-get update && sudo apt-get install ngrok

    - name: Start ngrok with configuration file
      run: ng
