name: Setup and Start Demo

on:
  workflow_dispatch:
    inputs:
      config-file:
        description: 'Path to the configuration YAML file'
        required: true
        default: 'podman-stacks-config.yml'
        type: string

permissions: 
  contents: write
  issues: write
  actions: write

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      issue-number: ${{ steps.create-issue.outputs.issue-number }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Read configuration file
      id: read-config
      run: |
        pip3 install pyyaml
        python3 -c "
        import yaml
        import json
        with open('${{ github.event.inputs.config-file }}', 'r') as file:
            config = yaml.safe_load(file)
        stacks = config.get('stacks', [])
        if isinstance(stacks, list):
            matrix = {'include': [{'name': stack['name'], 'path': stack.get('compose_file', '')} for stack in stacks]}
            print('::set-output name=matrix::' + json.dumps(matrix))
        else:
            print(\"::error::Invalid configuration format, 'stacks' key must be a list\")
        "

    - name: Create new issue
      id: create-issue
      uses: actions/github-script@v5
      with:
        script: |
          const { data: issue } = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Demo environment access - Job ID: ${context.runId}`,
            body: 'The demo environment is being set up. Details will follow shortly.'
          });
          core.setOutput('issue-number', issue.number)

    - name: Set matrix
      id: set-matrix
      run: echo "::set-output name=matrix::${{ steps.read-config.outputs.matrix }}"

    - name: debug matrix
      run: |
        echo "Matrix: ${{ steps.set-matrix.outputs.matrix }}"

  start-demo:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.matrix || '{}') }}
      fail-fast: false

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Debug matrix
      run: |
        echo "Matrix: ${{ needs.setup.outputs.matrix }}"

    - name: Install dependencies
      run: |
        pip3 install podman-compose==1.0.6 pyyaml==5.4.1 requests==2.25.1

    - name: Start SSH service
      run: |
        sudo systemctl start ssh
        sudo systemctl enable ssh

    - name: Set up SSH for the runner
      run: |
        mkdir -p ~/.ssh
        ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N ""
        cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys
        echo "Host *" > ~/.ssh/config
        echo "  StrictHostKeyChecking no" >> ~/.ssh/config

    - name: Start services with podman-compose
      run: |
        podman-compose -f "${{ matrix.path }}" up -d
        sleep 10  # Wait for services to start

    - name: Verify services are running
      run: |
        podman-compose -f "${{ matrix.path }}" ps

    - name: Download generate_ngrok_config.py script
      run: |
        curl -O https://raw.githubusercontent.com/cloin/podman-compose-demo/main/.github/workflows/generate_ngrok_config.py

    - name: Create ngrok configuration file
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        PODMAN_COMPOSE_PATH: ${{ matrix.path }}
      run: |
        python generate_ngrok_config.py

    - name: Display ngrok configuration
      run: cat ngrok.yml

    - name: Install ngrok
      run: |
        curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null && \
        echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list && \
        sudo apt-get update && sudo apt-get install ngrok

    - name: Start ngrok with configuration file
      run: ngrok start --config ngrok.yml --all &

    - name: Get ngrok URLs
      id: get-ngrok-urls
      run: |
        sleep 5  # Wait for ngrok to start
        NGROK_TUNNELS=$(curl --silent http://localhost:4040/api/tunnels | jq -r '.tunnels[] | "\(.name) \(.public_url)"')
        echo "$NGROK_TUNNELS" > ngrok_tunnels.txt
        echo "::set-output name=tunnels::$NGROK_TUNNELS"

    - name: Base64 encode SSH private key
      id: encode-ssh-key
      run: |
        base64 -w 0 ~/.ssh/id_rsa > id_rsa_base64
        echo "::set-output name=ssh_key_base64::$(cat id_rsa_base64)"

    - name: Update issue body file
      run: |
        echo "Your services are available at the following URLs:" >> issue_body.md
        while IFS= read -r line; do
          service_name=$(echo "$line" | awk '{print $1}')
          url=$(echo "$line" | awk '{print $2}')
          if [[ "$service_name" != "ssh" ]]; then
            echo "${{ matrix.name }}-$service_name: $url" >> issue_body.md
          else
            ssh_url="$url"
          fi
        done < ngrok_tunnels.txt
        echo "" >> issue_body.md
        echo "SSH into the runner using the following command:" >> issue_body.md
        echo "\`\`\`" >> issue_body.md
        echo "echo \"${{ steps.encode-ssh-key.outputs.ssh_key_base64 }}\" | base64 --decode > id_rsa" >> issue_body.md
        echo "chmod 600 id_rsa" >> issue_body.md
        SSH_HOST=$(echo "$ssh_url" | sed -E 's#^tcp://(.*):(.*)$#\1#')
        SSH_PORT=$(echo "$ssh_url" | sed -E 's#^tcp://(.*):(.*)$#\2#')
        echo "ssh -i id_rsa -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no runner@$SSH_HOST -p $SSH_PORT" >> issue_body.md
        echo "\`\`\`" >> issue_body.md

    - name: Update issue with environment details
      uses: actions/github-script@v5
      with:
        script: |
          const fs = require('fs');
          const issueBody = fs.readFileSync('issue_body.md', 'utf8');
          const issueNumber = '${{ needs.setup-demo-environment.outputs.issue-number }}';
          await github.rest.issues.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issueNumber,
            body: issueBody
          });

    - name: Monitor issue for closure
      id: monitor-issue
      uses: actions/github-script@v5
      timeout-minutes: 60  # Set timeout duration for 1 hour
      with:
        script: |
          const issueNumber = '${{ needs.setup-demo-environment.outputs.issue-number }}';
          const timeoutDuration = 3600000;  // 1 hour in milliseconds
          const startTime = Date.now();

          const checkIssueClosed = async () => {
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });
            if (issue.state === 'closed') {
              core.info('Issue is closed. Marking workflow as successful.');
              core.setOutput('issue-closed', true);
              return;
            } else if (Date.now() - startTime > timeoutDuration) {
              core.info('Timeout reached. Closing issue and marking workflow as successful.');
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                state: 'closed',
                body: issue.body + '\n\nClosed automatically due to timeout.'
              });
              core.setOutput('issue-closed', true);
              return;
            } else {
              core.info('Issue is still open. Continuing...');
              setTimeout(checkIssueClosed, 60000);
            }
          };
          await checkIssueClosed();

    - name: Cleanup
      if: always()
      run: |
        podman-compose -f "${{ matrix.path }}" down
        pkill ngrok

    - name: Close issue with comment
      if: always()
      run: |
        ISSUE_NUMBER=${{ needs.setup-demo-environment.outputs.issue-number }}
        curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -d "{\"body\": \"Closing this issue as the session has ended.\", \"state\": \"closed\"}" \
          "https://api.github.com/repos/${{ github.repository }}/issues/${ISSUE_NUMBER}"

    - name: Report success
      if: steps.monitor-issue.outputs.issue-closed == 'true'
      run: echo "Workflow completed successfully."

    - name: Report failure
      if: env.FAILURE == 'true'
      run: echo "Workflow failed."
